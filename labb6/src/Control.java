//*******************************************************************
//
// GAME OF CONTROL
//
//                                 (c) Joachim Parrow 2003, 2006, 2010
//
//*******************************************************************

import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.*;

public class Control
{

     static final String VERSION_NUMBER = "6.3";              // version number
     static final boolean testSetup = true;                  // If true, start a test session

     public static void main(String[] args)
     {

       // The following hack is needed to make the background colors of buttons
       // show on a mac. If it makes trouble just delete it.

         String laf = UIManager.getCrossPlatformLookAndFeelClassName();
         try {
             UIManager.setLookAndFeel(laf);
         } catch (Exception e) {
             System.err.println("Error loading L&F: " + e.getMessage());
         }


      // main just starts one instance of StartControl - or two instances if testing.

        if (!testSetup) {
            new StartControl(false, false);       // Normal start: Here goes!
        } else {
            new StartControl(true, false);        // Test start: start a listener
            new StartControl(false, true);        // and then start a client on the same thread (OK for test purposes!)
        }
    }
}

//*************************************************************************
//
// Start Control
//
//  Handles all user interaction to start a game of control
//
//*************************************************************************


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


//---------------------------------------------------------------------------------
// Wrapper for game parameters transmitted between players
//---------------------------------------------------------------------------------


//---------------------------------------------------------------------------------
// Wrapper for game parameters on a recorded game
//---------------------------------------------------------------------------------





/*
************************************************************************************************
 *++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *Create the graphic interface for a player:
 *set up a frame with panels
 *++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ***********************************************************************************************
 */



 /*
 *++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *
 *Main class in the game of control
 *
 *Serves one player with game logics
 *Reacts to player mouse commands , sends moves to opponent,
 * and reacts to to moves received by opponent
 *
 *++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *
 */


//********************************************************************************
//
// Here ends class Player
//
//********************************************************************************


//---------------------------------------------------------------------------------
// Message is just a wrapper for data being sent.
//   It is used by both Player and Replayer.
//---------------------------------------------------------------------------------


//****************************************************************************************************
  //
  //  Separate classes to play back a recorded game
  //
  //****************************************************************************************************

  //****************************************************************
  //
  // "PlayBack" is akin to "PlayerInterface": set up frame for playback
  //
  //****************************************************************


//***************************************************************************
 //
 //  Replayer: class to replay a game
 //
 //***************************************************************************


//************************************************************************
//
// Board
//
//************************************************************************


//*******************************************************************
//
// A piece
//
//*******************************************************************


//********************************************************************
//
// Pebble
//
//********************************************************************


//*****************************************************************
//
// Rubble
//
//*****************************************************************


//*******************************************************************
//
// Keep
//
//*******************************************************************


//*******************************************************************
//
// Heavy Piece: What is common for Quorum, Bouncer and Nimbler
//
//*******************************************************************


//*******************************************************************
//
// Bouncer
//
//*******************************************************************


//*******************************************************************
//
// Quorum
//
//*******************************************************************

//*******************************************************************
//
// Nimbler
//
//*******************************************************************


// End of file




